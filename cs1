const $ = new Env("伊利");
const axios = require("axios").default
const CryptoJS = require("crypto-js");
const Notify = 0;
const split = "&"
const open_thread = Boolean(process.env['ok']) || false; // 并发
const fanka = Boolean(process.env['fanka']) || false; // 开启翻卡
const IS_PROXY = false;
const proxy_url = '';
let tokens = [];
let codes = [];

function AES_Encrypt(word) {
    var key = CryptoJS.enc.Utf8.parse("asdvbnqwer!=564av8952116lkouytb+");
    var iv = CryptoJS.enc.Utf8.parse("Y9uR16ByteIvH8q9");
    var srcs = CryptoJS.enc.Utf8.parse(word);
    var encrypted = CryptoJS.AES.encrypt(srcs, key, {
        iv: iv,
        mode: CryptoJS.mode.CBC,
        padding: CryptoJS.pad.Pkcs7
    });
    return encrypted.toString();
}

async function retry(func, maxRetries = 5, delay = 5) {
    for (let i = 0; i < maxRetries; i++) {
        let r = await this[func]();
        if (r) return r;
        await $.wait(delay)
    }
}

class MainProgram {
    constructor(user, index) {
        this.user = user;
        this.index = index;
        try {
            let t = JSON.parse(user);
            this.platform = t.platform;
            this.userId = t.userId;
            this.access_token = t?.value?.['access-token'];
            this.is_bncr = true;
        } catch (e) {
            let t = user.split("#");
            this.access_token = t[0];
        }
        this.camp_host = 'https://wx-camp-180-cny-api.mscampapi.digitalyili.com';
        // this.camp_host = 'https://wx-camp-180-suannai-cny-lottery-api.mscampapi.digitalyili.com';
        this.camp_headers = {}
        this.num1 = 2;
        this.num2 = 2;
        this.token = ''
        this.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 MicroMessenger/7.0.20.1781(0x6700143B) NetType/WIFI MiniProgramEnv/Windows WindowsWechat/WMPF WindowsWechat(0x63090c11) XWEB/8555',
            'access-token': this.access_token,
            'content-type': 'application/json',
            'scene': '1256',
            'xweb_xhr': '1',
            'x-tingyun': 'c=M|wm6l1s4m4N8',
            'tenant-id': '1559474730809618433',
            'referer': 'https://servicewechat.com/wx06af0ef532292cd3/600/page-frame.html',
            'accept-language': 'zh-CN,zh;q=0.9'
        }
    }

    log(msg) {
        console.log(`账号[${this.index}]:${msg}`);
    }

    async push(msg) {
        if (!this.is_bncr) return;
        let url = 'http://110.40.80.169:9089/api/push';
        let r = await $.get(url, {
            params: {
                platform: this.platform,
                userId: this.userId,
                msg,
                type: 'text',
            }
        });
        console.log(r);
        return r;
    }

    async update_proxy() {
        if (!IS_PROXY) return;
        let res = await $.get(proxy_url);
        let tmp = res.split(":");
        this.proxy = {
            protocol: 'http',
            host: tmp[0],
            port: tmp[1]
        }
        console.log(this.proxy)
    }

    async update_camp_headers() {
        var O = Date.now();
        var P = O + "&" + String(Math.floor(100000 + 900000 * Math.random()));
        var Q = "timeStamp:" + O + "&uniqueCode:" + P + {
            1: "963QQ45465465xcvdasfasdfzxEcadfafzafoi897as8dfw8g4za78qqfd878000df8/er78a",
            2: "363QQ45465465xcvdas89!safzafwa36paweoi897as8dfw8g4za78qqfd878000df8/er89b",
            3: "763Qi45895465xcv89as89!sa2616wa36paweoi897as8dfw8g4za78qqfd878000df8/eqr23b",
            4: "7531Qi45891546115xcv89as819!sa26161wa36pa81g4z1a78qqfd87810001df18/eqr213b",
            5: "3f53f1Qia4f5f91546fa115axcvfff89asf819!saff26161fwa36fpa81g4z1fa7/eqr21f3b",
            6: "egf513gf1Qifag4f5f9f154g6fa115afxgcvffgf89gasgf8g19!saffg2g6161gfg6fpa@g1g",
            7: "2e@gf513g2f1Qif@ag4!f5f92f215!4g6fa115afxgcvffgf89gasgf82g19!2gfwa3g62fpa2",
            8: "6e@!gf514g2fb1Qif@!bag41f89gasbgf8b2g19!2gfwa3gb62fbpa@g1g32b9999!",
            9: "6a@!gf514g2fb1Qif@!bag41f89gasbgf8b2g19!2gfwa3gb62fbpa@g1g32b9869!++3",
            10: "2e@gf513g2f1Qif@ag4!sdfzxEcadfafzafoi897as8dfw8g4za78qqfd8780df8==/er78a"
        }[this.num2];
        var R = CryptoJS.MD5(Q).toString().toUpperCase();
        var S = 1 == this.num1 ? AES_Encrypt(R) : 2 == this.num1 ? CryptoJS.MD5(R).toString().toUpperCase() : 3 == this.num1 ? CryptoJS.MD5(AES_Encrypt(Q)).toString().toUpperCase() : 4 == this.num1 ? AES_Encrypt(AES_Encrypt(Q)) : R;
        var T = {
            timestamp: O,
            uniquecode: P,
            signature: S
        };
        this.camp_headers = {
            "content-type": "application/json",
            xweb_xhr: "1",
            timestamp: O,
            signature: S,
            uniquecode: P,
            access_token: this.access_token,
            token: this.token,
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 MicroMessenger/7.0.20.1781(0x6700143B) NetType/WIFI MiniProgramEnv/Windows WindowsWechat/WMPF WindowsWechat(0x63090c11) XWEB/8555",
            "app-version": "1.1.1",
            accept: "*/*",
            "Sec-Fetch-Site": "cross-site",
            "Sec-Fetch-Mode": "cors",
            "Sec-Fetch-Dest": "empty",
            Referer: "https://servicewechat.com/wx06af0ef532292cd3/533/page-frame.html",
            "Accept-Encoding": "gzip, deflate, br",
            "Accept-Language": "zh-CN,zh;q=0.9"
        }
    }

    async signIn() {
        let url = "";
        let data = "";
        let headers = this.headers;
        let res = await $.post(url, data, { headers }, 1);
        res.success ? $.addMsg(`每日签到:✅`) : $.addMsg(`每日签到:❌`), await this.push("123");
    }

    async user_info() {
        let url = "https://msmarket.msx.digitalyili.com/gateway/api/auth/account/user/info";
        let headers = this.headers;
        let response = await $.get(url, { headers }, 1);

        if (!response.status) {
            return this.log(response.error.msg), false;
            ;
        }
        this.mobile = response.data.mobile;
        this.unionId = response.data.unionId;
        this.nickName = response.data.nickName;
        this.avatarUrl = response.data.avatarUrl;
        this.openId = response.data.openId;
        return true;
    }

    async authorize_code() {
        let url = 'http://110.40.80.169:9089/api/yili_code';
        let params = {
            'access_token': this.access_token
        };
        let response = await $.get(url, { params }, 1);
        this.authorizationCode = response.code;
        if (!this.authorizationCode) {
            return this.log(`获取authorizationCode失败 -> ${JSON.stringify(response)}`), false;

        } else {
            return this.log(`获取authorizationCode成功`), true;
        }
    }

    async set_user_info() {
        let url = `${this.camp_host}/v2/wechat/applet/set-user-info`;
        let data = {
            authorizationCode: this.authorizationCode,
            headImg: this.avatarUrl,
            phoneNum: this.mobile,
            nickName: this.nickName,
            openId: this.openId,
            unionId: this.unionId,
            ciphertext: CryptoJS.MD5(this.unionId + "ui@op9889;as98gh12c3b1&!jiasdasdjlkyf98r4y3ujfnakhjrf098").toString()
        };
        this.update_camp_headers();
        let headers = this.camp_headers;
        let response = ''
        try {
            response = await $.post(url, data, { headers });
            this.num1 = response.data.num1;
            this.num2 = response.data.num2;
            this.token = response.data.token;
            if (response.code !== 200) return this.log('token已过期'), false;
        } catch (e) {
            return this.log(JSON.stringify(response)), false;
        }
        return true;
    }

    async fragment() {
        let url = `${this.camp_host}/fragmentActivity/fragment?activityId=1&openId=${this.openId}`;
        this.update_camp_headers();
        let headers = this.camp_headers;
        let response = await $.get(url, { headers });
        try {
            this.send_data = response.data.filter(c => c.num > 1)[0];
            this.open_data = response.data.filter(c => c.num > 1) || [];
            return true;
        } catch (e) {
            return false;
        }
    }

    async sign() {
        let url = `${this.camp_host}/fragment/ticket/sign?openId=${this.openId}`;
        this.update_camp_headers();
        let headers = this.camp_headers;
        let response = await $.get(url, { headers });
        this.log(`签到 -> ${response.message}`)
    }

    async see_page() {
        let url = `${this.camp_host}/fragment/ticket/see-page?openId=${this.openId}`;
        this.update_camp_headers();
        let headers = this.camp_headers;
        let response = await $.get(url, { headers });
        this.log(`浏览 -> ${response.message}`)
    }

    async getTimes() {
        let url = `${this.camp_host}/fragment/ticket/get?openId=${this.openId}`;
        this.update_camp_headers();
        let headers = this.camp_headers;
        let response = await $.get(url, { headers });
        this.times = response.data;
        this.log(`拥有抽卡次数 -> ${this.times || 0} 次`);
    }

    async lottery() {
        await this.getTimes();
        for (let i = 0; i < this.times; i++) {
            let url = `${this.camp_host}/fragmentActivity/lottery?activityId=1&openId=${this.openId}`;
            this.update_camp_headers();
            let headers = this.camp_headers;
            let response = await $.get(url, { headers });
            this.log(`抽卡获得 -> ${response.data?.fragmentName}`)
            await $.wait(5);
        }
    }

    async open_price() {
        if(!this.fanka) return;
        if (!await retry.call(this, 'fragment')) return;
        for (const item of this.open_data) {
            for (let i = 0; i < item.num - 1; i++) {
                let url = `${this.camp_host}/fragmentActivity/open-prize?fragmentId=${item.fragmentId}&city=呼和浩特市&activityId=1&openId=${this.openId}`;
                this.update_camp_headers();
                let headers = this.camp_headers;
                let response = await $.get(url, { headers });
                await $.wait(2);

                response.data?.prizeName ? this.log(`翻卡获得 -> ${response.data.prizeName}`) : this.log(JSON.stringify(response));
            }
        }
    }
    async ticket_info() {
        let url = `${this.camp_host}/fragment/ticket/ticket-info?openId=${this.openId}`;
        this.update_camp_headers();
        let headers = this.camp_headers;
        let response = await $.get(url, { headers });
        if(response.code !== 200) return false;
        return response;
    }
    async task() {
        let response = await retry.call(this, 'ticket_info');

        if (!response.data.sign) {
            await $.wait(5);
            await this.sign();
        } else {
            this.log('今天已签到,不可重复签到')
        }

        if (!response.data.seePage) {
            await $.wait(5);
            await this.see_page()
        } else {
            this.log('今天已浏览,不可重复浏览')
        }
    }
    async send_blessing() {
        let url = `${this.camp_host}/send/blessing?openId=${this.openId}`;
        this.update_camp_headers();
        let headers = this.camp_headers;
        let response = await $.get(url, { headers });
        this.blessingId = response.data.id;
        this.statement = response.data.statement;
    }
    async send() {
        await this.fragment();
        if (!this.send_data) return;
        await this.send_blessing();
        let url = `${this.camp_host}/send/card/code?fragmentId=${this.send_data.fragmentId}&blessingId=${this.blessingId}&openId=${this.openId}`;
        this.update_camp_headers();
        let headers = this.camp_headers;
        let response = await $.get(url, { headers });
        if (response.code === 200) {
            this.log(`赠送成功：卡片 -> ${this.send_data.fragmentName}  口令 -> ${response.data}`);
            codes.push(response.data);
        } else {
            this.log(`赠送失败：${JSON.stringify(response)}`);
        }
    }
    async receive() {
        let linkCode = codes.pop();
        if (!linkCode) return;
        let url = `${this.camp_host}/send/receive/card?linkCode=${linkCode}&openId=${this.openId}`;
        this.update_camp_headers();
        let headers = this.camp_headers;
        let response = await $.get(url, { headers });

        if (response.code === 200) {
            this.log(`领取成功`);
        } else {
            this.log(`领取失败 -> ${JSON.stringify(response)}  ${linkCode}`);
        }
    }
    async doTask() {
        await this.update_proxy();

        if (!await retry.call(this, 'user_info')) return;
        if (!await retry.call(this, 'authorize_code')) return;
        if (!await retry.call(this, 'set_user_info')) return;
        await $.wait(5);
        await this.task();
        await this.lottery();

        if (open_thread) {
            await $.wait(5);
            await this.open_price();
        } else {
            await this.send();
        }
    }
}

Array.prototype.shuffle = function () {
    var random;
    var newArr = [];
    while (this.length) {
        random = Math.floor(Math.random() * this.length);
        newArr.push(this[random]);
        this.splice(random, 1);
    }
    return newArr;
};

(async () => {
    let arr = $.getToken("YiLi").shuffle();
    if (!arr) return await $.SendMsg("未填写token");

    let promises = [];
    if (open_thread) {
        for (let index = 0; index < arr.length; index++) {
            promises.push(new MainProgram(arr[index], index + 1).doTask())
        }
        Promise.all(promises);
    } else {
        for (let index = 0; index < arr.length; index++) {
            tokens.push(new MainProgram(arr[index], index + 1));
            await tokens[index].doTask();
            await $.wait(3);
        }
        for (let index = 0; index < arr.length; index++) {
            await tokens[index].receive();
            await $.wait(3);
            await tokens[index].lottery();
            await $.wait(3);
            await tokens[index].open_price();
        }
    }


    await $.SendMsg($._msg);
    $.done();
})();


function Env(name) {
    return new (class {
        constructor(name) {
            this.name = name;
            console.log(`\ud83d\udd14${this.name},\u5f00\u59cb!`);
        }

        async update_proxy() {
            if (!IS_PROXY) return;
            let res = (await axios.get(proxy_url)).data;
            let tmp = res.split(":");
            this.proxy = {
                protocol: 'http',
                host: tmp[0],
                port: tmp[1]
            }
            console.log(this.proxy)
        }

        async get(url, params, i = 5, s) {
            if (!i) return {}
            if (!IS_PROXY) delete params.proxy;
            if (IS_PROXY && !params.proxy && !this.proxy?.host) await this.update_proxy(), params.proxy = this.proxy;
            if (IS_PROXY) params.proxy = this.proxy;
            try {
                let res = (await axios.get(url, params)).data;
                if (s && JSON.stringify(res).includes(s)) this.update_proxy();
                return res;
            } catch (err) {
                console.log(`get ${url} :${err.message}`);
                await $.wait(5)
                await this.update_proxy();
                params.proxy = this.proxy;
                return this.get(url, params, --i);
            }
        }

        async post(url, data, params, i = 5, s) {
            if (!i) return {}
            if (!IS_PROXY) delete params.proxy;
            if (IS_PROXY && !params.proxy && !this.proxy?.host) await this.update_proxy(), params.proxy = this.proxy;
            if (IS_PROXY) params.proxy = this.proxy;
            try {
                // console.log(url,this.proxy)
                //console.log("proxy",params.proxy)
                let res = (await axios.post(url, data, params)).data;
                if (s && JSON.stringify(res).includes(s)) this.update_proxy();
                return res
            } catch (err) {
                console.log(`post ${url} :${err.message}`);
                await $.wait(5)
                await this.update_proxy()
                params.proxy = this.proxy;
                return this.post(url, data, params, --i);
            }
        }

        async SendMsg(message) {
            if (!message) return;
            if (Notify > 0) {
                var notify = require("./sendNotify");
                await notify.sendNotify(this.name, message);
            }
        }

        addMsg(msg) {
            if (!this._msg) this._msg = "";
            console.log(msg);
            this._msg += msg + "\n";
        }

        wait(delay) {
            return new Promise((res) => {
                setTimeout(res, delay * 1000);
            });
        }

        getToken(key) {
            let tmp = process.env[key];
            if (!tmp) return [];
            return tmp.split(split);
        }

        done() {
            console.log(`\ud83d\udd14${this.name},\u7ed3\u675f!`);
        }
    })(name);
}
